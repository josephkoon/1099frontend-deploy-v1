{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar utils = require('../utils');\n\nvar stripeMethod = StripeResource.method;\nmodule.exports = StripeResource.extend({\n  path: 'customers',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del', 'setMetadata', 'getMetadata'],\n\n  /**\n   * Customer: Subscription methods\n   */\n  _legacyUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId']\n  }),\n  _newstyleUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  _legacyCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId']\n  }),\n  _newstyleCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  createSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId']\n  }),\n  listSubscriptions: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveSubscription: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  updateSubscription: function updateSubscription(customerId, subscriptionId) {\n    if (typeof subscriptionId == 'string') {\n      return this._newstyleUpdateSubscription.apply(this, arguments);\n    } else {\n      return this._legacyUpdateSubscription.apply(this, arguments);\n    }\n  },\n  cancelSubscription: function cancelSubscription(customerId, subscriptionId) {\n    // This is a hack, but it lets us maximize our overloading.\n    // Precarious assumption: If it's not an auth key it _could_ be a sub id:\n    if (typeof subscriptionId == 'string' && !utils.isAuthKey(subscriptionId)) {\n      return this._newstyleCancelSubscription.apply(this, arguments);\n    } else {\n      return this._legacyCancelSubscription.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Customer: Card methods\n   */\n  createCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId']\n  }),\n  listCards: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveCard: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n  updateCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n  deleteCard: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n\n  /**\n   * Customer: Source methods\n   */\n  createSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId']\n  }),\n  listSources: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveSource: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  updateSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  deleteSource: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  verifySource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}/verify',\n    urlParams: ['customerId', 'sourceId']\n  }),\n\n  /**\n   * Customer: Discount methods\n   */\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/discount',\n    urlParams: ['customerId']\n  }),\n  deleteSubscriptionDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}/discount',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n\n  /**\n   * Customer: TaxId methods\n   */\n  createTaxId: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId']\n  }),\n  deleteTaxId: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId']\n  }),\n  listTaxIds: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveTaxId: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId']\n  })\n});","map":null,"metadata":{},"sourceType":"script"}