{"ast":null,"code":"import store from '../store';\nimport { validateIncome } from '../actions';\nexport default function incomeValidator() {\n  var incomeErrors = {\n    errCount: 0,\n    income: null\n  };\n  var income = store.getState().income;\n\n  if (!income.rent && !income.royalties && !income.other && !income.non_employee_comp && !income.federal_tax_withheld && !income.non_employee_comp && !income.s409a_income && !income.s409a_deferrals && !income.fish_boat && !income.medical_payments && !income.substitute_payments && !income.direct_sales && !income.state_tax_withheld && !income.state_tax_id && !income.state_income) {\n    incomeErrors.income = 'At least one field from the Income section must be filled.';\n    incomeErrors.errCount++;\n  } else {\n    incomeErrors.income = null;\n    incomeErrors.errCount = 0;\n  }\n\n  store.dispatch(validateIncome(incomeErrors));\n  return incomeErrors.errCount;\n}\n;","map":{"version":3,"sources":["/Users/josephkoon/Desktop/1099-complete/client/src/validate/incomeValidator.js"],"names":["store","validateIncome","incomeValidator","incomeErrors","errCount","income","getState","rent","royalties","other","non_employee_comp","federal_tax_withheld","s409a_income","s409a_deferrals","fish_boat","medical_payments","substitute_payments","direct_sales","state_tax_withheld","state_tax_id","state_income","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,YAA7B;AAGA,eAAe,SAASC,eAAT,GAA2B;AACtC,MAAMC,YAAY,GAAG;AACjBC,IAAAA,QAAQ,EAAE,CADO;AAEjBC,IAAAA,MAAM,EAAE;AAFS,GAArB;AAKA,MAAMA,MAAM,GAAGL,KAAK,CAACM,QAAN,GAAiBD,MAAhC;;AAEA,MAAI,CAACA,MAAM,CAACE,IAAR,IACO,CAACF,MAAM,CAACG,SADf,IAEO,CAACH,MAAM,CAACI,KAFf,IAGO,CAACJ,MAAM,CAACK,iBAHf,IAIO,CAACL,MAAM,CAACM,oBAJf,IAKO,CAACN,MAAM,CAACK,iBALf,IAMO,CAACL,MAAM,CAACO,YANf,IAOO,CAACP,MAAM,CAACQ,eAPf,IAQO,CAACR,MAAM,CAACS,SARf,IASO,CAACT,MAAM,CAACU,gBATf,IAUO,CAACV,MAAM,CAACW,mBAVf,IAWO,CAACX,MAAM,CAACY,YAXf,IAYO,CAACZ,MAAM,CAACa,kBAZf,IAaO,CAACb,MAAM,CAACc,YAbf,IAcO,CAACd,MAAM,CAACe,YAdnB,EAeM;AACFjB,IAAAA,YAAY,CAACE,MAAb,GAAsB,4DAAtB;AACAF,IAAAA,YAAY,CAACC,QAAb;AACH,GAlBD,MAkBO;AACHD,IAAAA,YAAY,CAACE,MAAb,GAAsB,IAAtB;AACAF,IAAAA,YAAY,CAACC,QAAb,GAAwB,CAAxB;AACH;;AAEDJ,EAAAA,KAAK,CAACqB,QAAN,CAAepB,cAAc,CAACE,YAAD,CAA7B;AACA,SAAOA,YAAY,CAACC,QAApB;AACH;AAAA","sourcesContent":["import store from '../store';\nimport {validateIncome} from '../actions';\n\n\nexport default function incomeValidator() {\n    const incomeErrors = {\n        errCount: 0,\n        income: null\n    }\n    \n    const income = store.getState().income;\n\n    if (!income.rent\n            && !income.royalties \n            && !income.other \n            && !income.non_employee_comp\n            && !income.federal_tax_withheld\n            && !income.non_employee_comp\n            && !income.s409a_income\n            && !income.s409a_deferrals\n            && !income.fish_boat\n            && !income.medical_payments\n            && !income.substitute_payments\n            && !income.direct_sales\n            && !income.state_tax_withheld\n            && !income.state_tax_id\n            && !income.state_income\n        ) {\n        incomeErrors.income = 'At least one field from the Income section must be filled.';\n        incomeErrors.errCount++;\n    } else {\n        incomeErrors.income = null;\n        incomeErrors.errCount = 0;\n    }\n\n    store.dispatch(validateIncome(incomeErrors));\n    return incomeErrors.errCount;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}