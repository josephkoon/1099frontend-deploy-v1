{"ast":null,"code":"import _classCallCheck from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js\";\nimport React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\nimport store from '../../store';\nimport emailValidator from '../../validate/emailValidator';\n\nvar GetEmail =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GetEmail, _React$Component);\n\n  function GetEmail(props) {\n    var _this;\n\n    _classCallCheck(this, GetEmail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetEmail).call(this, props));\n    _this.state = {\n      email: '',\n      isValidEmail: true,\n      isTouchedEmail: false,\n      emailErrors: {}\n    };\n    _this.handleEmailBlur = _this.handleEmailBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFieldChange = _this.handleFieldChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GetEmail, [{\n    key: \"handleEmailBlur\",\n    value: function handleEmailBlur(e) {\n      var _this2 = this;\n\n      var email = e.target.value;\n      this.setState({\n        isValidEmail: isEmail(email)\n      });\n      this.setState({\n        email: email\n      }, function () {\n        _this2.props.updateEmail(_this2.state);\n      });\n      emailValidator();\n    }\n  }, {\n    key: \"handleFieldChange\",\n    value: function handleFieldChange(e) {\n      var _this3 = this;\n\n      this.setState({\n        email: e.target.value,\n        isTouchedEmail: true\n      }, function () {\n        _this3.props.updateEmail(_this3.state);\n      });\n    }\n  }, {\n    key: \"updateErrors\",\n    value: function updateErrors() {\n      var emailErrors = store.getState().emailErrors;\n      this.setState({\n        emailErrors: emailErrors\n      });\n      this.setState({\n        isValidEmail: !emailErrors.email\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = store.subscribe(this.updateErrors.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      //const emailColor = !this.state.isTouchedEmail ? {backgroundColor: '#ffffff'} : !this.state.isValidEmail? {backgroundColor: '#ffb3b3'} : {backgroundColor: '#ffffff'};\n      var emailColor = !this.state.isValidEmail || this.emailErrors && this.emailErrors.email ? {\n        backgroundColor: '#ffb3b3'\n      } : {\n        backgroundColor: '#ffffff'\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Email address *\")), React.createElement(\"div\", {\n        className: \"form-group\",\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        id: \"inputEmail\",\n        style: emailColor,\n        onBlur: function onBlur(event) {\n          return _this4.handleEmailBlur(event);\n        },\n        onChange: function onChange(e) {\n          return _this4.handleFieldChange(e);\n        },\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(UncontrolledTooltip, {\n        placement: \"right\",\n        target: \"inputEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"This is the email address to which your receipt will be sent.\")), React.createElement(FieldCheck3, {\n        isValid: this.state.isValidEmail,\n        message: this.state.emailErrors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GetEmail;\n}(React.Component); // <FieldCheck isTouched={this.state.isTouchedEmail} isValid={this.state.isValidEmail} message=\"Email address is required\"/>\n\n\nfunction mapStateToProps(state) {\n  return {\n    email: state.email\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateEmail: updateEmail\n  }, dispatch);\n};\n\nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\nexport default GetEmail;","map":{"version":3,"sources":["/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js"],"names":["React","UncontrolledTooltip","isEmail","connect","bindActionCreators","updateEmail","FieldCheck3","store","emailValidator","GetEmail","props","state","email","isValidEmail","isTouchedEmail","emailErrors","handleEmailBlur","bind","handleFieldChange","e","target","value","setState","getState","unsubscribe","subscribe","updateErrors","emailColor","backgroundColor","event","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\n\nimport store from '../../store';\nimport emailValidator from '../../validate/emailValidator';\n\n\nclass GetEmail extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: '',\n            isValidEmail: true,\n            isTouchedEmail: false,\n            emailErrors: {}\n        }\n    this.handleEmailBlur = this.handleEmailBlur.bind(this);\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n    handleEmailBlur(e) {\n        var email = e.target.value;   \n        this.setState({ isValidEmail: isEmail(email) });\n        this.setState({ email: email }, () => {\n            this.props.updateEmail(this.state)\n        });\n        emailValidator();\n    };\n\n    handleFieldChange(e) {\n        this.setState({ email:e.target.value, isTouchedEmail:true }, () => {\n            this.props.updateEmail(this.state)\n        });\n    }\n\n    updateErrors() {\n        const emailErrors = store.getState().emailErrors;\n        this.setState({ emailErrors:emailErrors });\n        this.setState({ isValidEmail:!emailErrors.email});\n    }\n\n    componentDidMount () {\n        this.unsubscribe = store.subscribe(this.updateErrors.bind(this))\n    }\n\n    componentWillUnmount() {\n        this.unsubscribe();\n    }\n            \n    render() {\n        //const emailColor = !this.state.isTouchedEmail ? {backgroundColor: '#ffffff'} : !this.state.isValidEmail? {backgroundColor: '#ffb3b3'} : {backgroundColor: '#ffffff'};\n        const emailColor = (!this.state.isValidEmail || (this.emailErrors && this.emailErrors.email)) ? {backgroundColor: '#ffb3b3'} : {backgroundColor: '#ffffff'};\n\n        return(\n            <div>\n                <div align=\"left\"><small>Email address *</small></div>\n                <div className=\"form-group\" align=\"left\" >\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail\" \n                        style={emailColor}\n                        onBlur={(event) => this.handleEmailBlur(event)} \n                        onChange={(e) => this.handleFieldChange(e)} \n                        required>\n                    </input>\n\n                    <UncontrolledTooltip placement=\"right\" target=\"inputEmail\">\n                        This is the email address to which your receipt will be sent.\n                    </UncontrolledTooltip>\n                </div>\n                <FieldCheck3 isValid={this.state.isValidEmail} message={this.state.emailErrors.email} />\n            </div>\n        )\n    }\n}\n\n// <FieldCheck isTouched={this.state.isTouchedEmail} isValid={this.state.isValidEmail} message=\"Email address is required\"/>\n\n  \nfunction mapStateToProps(state) {\n    return{\n      email: state.email\n    }\n  }\n  \nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateEmail: updateEmail\n    }, dispatch )\n  }\n  \nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\n  \nexport default GetEmail;\n\n\n\n"]},"metadata":{},"sourceType":"module"}