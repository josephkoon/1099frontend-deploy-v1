{"ast":null,"code":"import isPhone from 'validator/lib/isMobilePhone';\nimport store from '../store';\nimport { validatePayer } from '../actions';\nexport default function payerValidator() {\n  var payerErrors = {\n    errCount: 0,\n    name: null,\n    tin: null,\n    street: null,\n    city: null,\n    state: null,\n    zipcode: null,\n    phone: null\n  };\n  var payer = store.getState().payer; //console.log(payer);\n\n  if (!payer.name) {\n    payerErrors.name = 'Payer name is required.';\n    payerErrors.errCount++;\n  }\n\n  if (!payer.tin) {\n    payerErrors.tin = 'Payer TIN is required.';\n    payerErrors.errCount++;\n  } else if (payer.tin.length !== 9) {\n    payerErrors.tin = 'Payer TIN is not valid.  Must be 9 digits.';\n    payerErrors.errCount++;\n  }\n\n  if (!payer.street) {\n    payerErrors.street = 'Payer street address cannot be empty.';\n    payerErrors.errCount++;\n  }\n\n  if (!payer.city) {\n    payerErrors.city = 'Payer city is required.';\n    payerErrors.errCount++;\n  }\n\n  if (!payer.zipcode) {\n    payerErrors.zipcode = 'Payer Zip code is required.';\n    payerErrors.errCount++;\n  } else if (payer.zipcode.length !== 5) {\n    payerErrors.zipcode = 'Payer Zip code is not valid.  Length must be 5 digits.';\n    payerErrors.errCount++;\n  }\n\n  if (!payer.phone) {\n    payerErrors.phone = 'Payer phone is required';\n    payerErrors.errCount++;\n  } else if (!isPhone(payer.phone)) {\n    payerErrors.phone = 'Payer phone is invalid';\n    payerErrors.errCount++;\n  }\n\n  store.dispatch(validatePayer(payerErrors));\n  return payerErrors.errCount;\n}\n;","map":{"version":3,"sources":["/Users/josephkoon/Desktop/1099-complete/src/validate/payerValidator.js"],"names":["isPhone","store","validatePayer","payerValidator","payerErrors","errCount","name","tin","street","city","state","zipcode","phone","payer","getState","length","dispatch"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,6BAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,aAAR,QAA4B,YAA5B;AAGA,eAAe,SAASC,cAAT,GAA0B;AACrC,MAAMC,WAAW,GAAG;AAChBC,IAAAA,QAAQ,EAAE,CADM;AAEhBC,IAAAA,IAAI,EAAE,IAFU;AAGhBC,IAAAA,GAAG,EAAE,IAHW;AAIhBC,IAAAA,MAAM,EAAE,IAJQ;AAKhBC,IAAAA,IAAI,EAAE,IALU;AAMhBC,IAAAA,KAAK,EAAE,IANS;AAOhBC,IAAAA,OAAO,EAAE,IAPO;AAQhBC,IAAAA,KAAK,EAAE;AARS,GAApB;AAWA,MAAMC,KAAK,GAAGZ,KAAK,CAACa,QAAN,GAAiBD,KAA/B,CAZqC,CAarC;;AAEA,MAAI,CAACA,KAAK,CAACP,IAAX,EAAkB;AACdF,IAAAA,WAAW,CAACE,IAAZ,GAAmB,yBAAnB;AACAF,IAAAA,WAAW,CAACC,QAAZ;AACH;;AACD,MAAI,CAACQ,KAAK,CAACN,GAAX,EAAiB;AACbH,IAAAA,WAAW,CAACG,GAAZ,GAAkB,wBAAlB;AACAH,IAAAA,WAAW,CAACC,QAAZ;AACH,GAHD,MAGO,IAAIQ,KAAK,CAACN,GAAN,CAAUQ,MAAV,KAAqB,CAAzB,EAA4B;AAC/BX,IAAAA,WAAW,CAACG,GAAZ,GAAkB,4CAAlB;AACAH,IAAAA,WAAW,CAACC,QAAZ;AACH;;AACD,MAAI,CAACQ,KAAK,CAACL,MAAX,EAAoB;AAChBJ,IAAAA,WAAW,CAACI,MAAZ,GAAqB,uCAArB;AACAJ,IAAAA,WAAW,CAACC,QAAZ;AACH;;AACD,MAAI,CAACQ,KAAK,CAACJ,IAAX,EAAkB;AACdL,IAAAA,WAAW,CAACK,IAAZ,GAAmB,yBAAnB;AACAL,IAAAA,WAAW,CAACC,QAAZ;AACH;;AACD,MAAI,CAACQ,KAAK,CAACF,OAAX,EAAqB;AACjBP,IAAAA,WAAW,CAACO,OAAZ,GAAsB,6BAAtB;AACAP,IAAAA,WAAW,CAACC,QAAZ;AACH,GAHD,MAGO,IAAIQ,KAAK,CAACF,OAAN,CAAcI,MAAd,KAAyB,CAA7B,EAAgC;AACnCX,IAAAA,WAAW,CAACO,OAAZ,GAAsB,wDAAtB;AACAP,IAAAA,WAAW,CAACC,QAAZ;AACH;;AAED,MAAI,CAACQ,KAAK,CAACD,KAAX,EAAmB;AACfR,IAAAA,WAAW,CAACQ,KAAZ,GAAoB,yBAApB;AACAR,IAAAA,WAAW,CAACC,QAAZ;AACH,GAHD,MAGO,IAAI,CAACL,OAAO,CAACa,KAAK,CAACD,KAAP,CAAZ,EAA2B;AAC9BR,IAAAA,WAAW,CAACQ,KAAZ,GAAoB,wBAApB;AACAR,IAAAA,WAAW,CAACC,QAAZ;AACH;;AAEDJ,EAAAA,KAAK,CAACe,QAAN,CAAed,aAAa,CAACE,WAAD,CAA5B;AACA,SAAOA,WAAW,CAACC,QAAnB;AACH;AAAA","sourcesContent":["import isPhone from 'validator/lib/isMobilePhone';\nimport store from '../store';\nimport {validatePayer} from '../actions';\n\n\nexport default function payerValidator() {\n    const payerErrors = {\n        errCount: 0,\n        name: null,\n        tin: null,\n        street: null,\n        city: null,\n        state: null,\n        zipcode: null,\n        phone: null\n    }\n        \n    const payer = store.getState().payer;\n    //console.log(payer);\n\n    if (!payer.name ) {\n        payerErrors.name = 'Payer name is required.';\n        payerErrors.errCount++;\n    }\n    if (!payer.tin ) {\n        payerErrors.tin = 'Payer TIN is required.'\n        payerErrors.errCount++;\n    } else if (payer.tin.length !== 9) {\n        payerErrors.tin = 'Payer TIN is not valid.  Must be 9 digits.'\n        payerErrors.errCount++;\n    }\n    if (!payer.street ) {\n        payerErrors.street = 'Payer street address cannot be empty.'\n        payerErrors.errCount++;\n    }\n    if (!payer.city ) {\n        payerErrors.city = 'Payer city is required.'\n        payerErrors.errCount++;\n    }\n    if (!payer.zipcode ) {\n        payerErrors.zipcode = 'Payer Zip code is required.'\n        payerErrors.errCount++;\n    } else if (payer.zipcode.length !== 5) {\n        payerErrors.zipcode = 'Payer Zip code is not valid.  Length must be 5 digits.'\n        payerErrors.errCount++;\n    }\n\n    if (!payer.phone ) {\n        payerErrors.phone = 'Payer phone is required'\n        payerErrors.errCount++;\n    } else if (!isPhone(payer.phone)) {\n        payerErrors.phone = 'Payer phone is invalid'\n        payerErrors.errCount++;\n    }\n\n    store.dispatch(validatePayer(payerErrors));\n    return payerErrors.errCount;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}