{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar path = require('path');\n\nvar uuid = require('uuid/v4');\n\nvar utils = require('./utils');\n\nvar Error = require('./Error');\n\nvar hasOwn = {}.hasOwnProperty;\nvar defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nvar defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n}); // Provide extension mechanism for Stripe Resource Sub-Classes\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, urlData) {\n  this._stripe = stripe;\n  this._urlData = urlData || {};\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize: function initialize() {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath: function createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function createResourcePathWithSymbols(pathWithSymbols) {\n    return '/' + path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  createUrlData: function createUrlData() {\n    var urlData = {}; // Merge in baseData\n\n    for (var i in this._urlData) {\n      if (hasOwn.call(this._urlData, i)) {\n        urlData[i] = this._urlData[i];\n      }\n    }\n\n    return urlData;\n  },\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n  _timeoutHandler: function _timeoutHandler(timeout, req, callback) {\n    var self = this;\n    return function () {\n      var timeoutErr = new Error('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req._isAborted = true;\n      req.abort();\n      callback.call(self, new Error.StripeConnectionError({\n        message: 'Request aborted due to timeout being reached (' + timeout + 'ms)',\n        detail: timeoutErr\n      }), null);\n    };\n  },\n  _responseHandler: function _responseHandler(req, callback) {\n    var self = this;\n    return function (res) {\n      var response = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        response += chunk;\n      });\n      res.on('end', function () {\n        var headers = res.headers || {}; // NOTE: Stripe responds with lowercase header names/keys.\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n\n        res.requestId = headers['request-id'];\n\n        var requestDurationMs = Date.now() - req._requestStart;\n\n        var responseEvent = utils.removeEmpty({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs\n        });\n\n        self._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            var err; // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new Error.StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new Error.StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new Error.StripeRateLimitError(response.error);\n            } else {\n              err = Error.StripeError.generate(response.error);\n            }\n\n            return callback.call(self, err, null);\n          }\n        } catch (e) {\n          return callback.call(self, new Error.StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            response: response,\n            exception: e,\n            requestId: headers['request-id']\n          }), null);\n        }\n\n        self._recordRequestMetrics(res.requestId, requestDurationMs); // Expose res object\n\n\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res\n        });\n        callback.call(self, null, response);\n      });\n    };\n  },\n  _generateConnectionErrorMessage: function _generateConnectionErrorMessage(requestRetries) {\n    return 'An error occurred with our connection to Stripe.' + (requestRetries > 0 ? ' Request was retried ' + requestRetries + ' times.' : '');\n  },\n  _errorHandler: function _errorHandler(req, requestRetries, callback) {\n    var self = this;\n    return function (error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n\n      callback.call(self, new Error.StripeConnectionError({\n        message: self._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n  _shouldRetry: function _shouldRetry(res, numRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= this._stripe.getMaxNetworkRetries()) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // Retry on conflict and availability errors.\n\n\n    if (res.statusCode === 409 || res.statusCode === 503) {\n      return true;\n    } // Retry on 5xx's, except POST's, which our idempotency framework\n    // would just replay as 500's again anyway.\n\n\n    if (res.statusCode >= 500 && res.req._requestEvent.method !== 'POST') {\n      return true;\n    }\n\n    return false;\n  },\n  _getSleepTimeInMS: function _getSleepTimeInMS(numRetries) {\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n    return sleepSeconds * 1000;\n  },\n  _defaultHeaders: function _defaultHeaders(auth, contentLength, apiVersion) {\n    var userAgentString = 'Stripe/v1 NodeBindings/' + this._stripe.getConstant('PACKAGE_VERSION');\n\n    if (this._stripe._appInfo) {\n      userAgentString += ' ' + this._stripe.getAppInfoAsString();\n    }\n\n    var headers = {\n      // Use specified auth token or use default from this stripe instance:\n      'Authorization': auth ? 'Bearer ' + auth : this._stripe.getApiField('auth'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': userAgentString\n    };\n\n    if (apiVersion) {\n      headers['Stripe-Version'] = apiVersion;\n    }\n\n    return headers;\n  },\n  _addTelemetryHeader: function _addTelemetryHeader(headers) {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n\n      headers['X-Stripe-Client-Telemetry'] = JSON.stringify({\n        'last_request_metrics': metrics\n      });\n    }\n  },\n  _recordRequestMetrics: function _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          'request_id': requestId,\n          'request_duration_ms': requestDurationMs\n        });\n      }\n    }\n  },\n  _request: function _request(method, host, path, data, auth, options, callback) {\n    var self = this;\n    var requestData;\n\n    function makeRequestWithData(error, data) {\n      var apiVersion;\n      var headers;\n\n      if (error) {\n        return callback(error);\n      }\n\n      apiVersion = self._stripe.getApiField('version');\n      requestData = data;\n      headers = self._defaultHeaders(auth, requestData.length, apiVersion);\n\n      self._stripe.getClientUserAgent(function (cua) {\n        headers['X-Stripe-Client-User-Agent'] = cua;\n\n        if (options.headers) {\n          Object.assign(headers, options.headers);\n        }\n\n        self._addTelemetryHeader(headers);\n\n        makeRequest(apiVersion, headers);\n      });\n    }\n\n    if (self.requestDataProcessor) {\n      self.requestDataProcessor(method, data, options.headers, makeRequestWithData);\n    } else {\n      makeRequestWithData(null, utils.stringifyRequestData(data || {}));\n    }\n\n    function retryRequest(requestFn, apiVersion, headers, requestRetries) {\n      requestRetries += 1;\n      return setTimeout(requestFn, self._getSleepTimeInMS(requestRetries), apiVersion, headers, requestRetries);\n    }\n\n    function makeRequest(apiVersion, headers, numRetries) {\n      var timeout = self._stripe.getApiField('timeout');\n\n      var isInsecureConnection = self._stripe.getApiField('protocol') == 'http';\n\n      var agent = self._stripe.getApiField('agent');\n\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var req = (isInsecureConnection ? http : https).request({\n        host: host || self._stripe.getApiField('host'),\n        port: self._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: agent,\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      }); // If this is a POST and we allow multiple retries, set a idempotency key if one is not\n      // already provided.\n\n      if (method === 'POST' && self._stripe.getMaxNetworkRetries() > 0) {\n        if (!headers.hasOwnProperty('Idempotency-Key')) {\n          headers['Idempotency-Key'] = uuid();\n        }\n      }\n\n      var requestEvent = utils.removeEmpty({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path\n      });\n      var requestRetries = numRetries || 0;\n      req._requestEvent = requestEvent;\n      req._requestStart = Date.now();\n\n      self._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, self._timeoutHandler(timeout, req, callback));\n      req.on('response', function (res) {\n        if (self._shouldRetry(res, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._responseHandler(req, callback)(res);\n        }\n      });\n      req.on('error', function (error) {\n        if (self._shouldRetry(null, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n      req.on('socket', function (socket) {\n        if (socket.connecting) {\n          socket.on(isInsecureConnection ? 'connect' : 'secureConnect', function () {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    }\n  }\n};\nmodule.exports = StripeResource;","map":null,"metadata":{},"sourceType":"script"}