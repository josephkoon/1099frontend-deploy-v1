{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar OPTIONAL_REGEX = /^optional!/;\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var commandPath = typeof spec.path == 'function' ? spec.path : utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n\n  var encode = spec.encode || function (data) {\n    return data;\n  };\n\n  var host = spec.host; // Don't mutate args externally.\n\n  var args = [].slice.call(requestArgs); // Generate and validate url params.\n\n  var urlData = self.createUrlData();\n\n  for (var i = 0, l = urlParams.length; i < l; ++i) {\n    var path; // Note that we shift the args array after every iteration so this just\n    // grabs the \"next\" argument for use as a URL parameter.\n\n    var arg = args[0];\n    var param = urlParams[i];\n    var isOptional = OPTIONAL_REGEX.test(param);\n    param = param.replace(OPTIONAL_REGEX, '');\n\n    if (param == 'id' && typeof arg !== 'string') {\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error('Stripe: \"id\" must be a string, but got: ' + typeof arg + ' (on API request to `' + requestMethod + ' ' + path + '`)');\n    }\n\n    if (!arg) {\n      if (isOptional) {\n        urlData[param] = '';\n        continue;\n      }\n\n      path = self.createResourcePathWithSymbols(spec.path);\n      throw new Error('Stripe: Argument \"' + urlParams[i] + '\" required, but got: ' + arg + ' (on API request to `' + requestMethod + ' ' + path + '`)');\n    }\n\n    urlData[param] = args.shift();\n  } // Pull request data and options (headers, auth) from args.\n\n\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args); // Validate that there are no more args.\n\n  if (args.length) {\n    path = self.createResourcePathWithSymbols(spec.path);\n    throw new Error('Stripe: Unknown arguments (' + args + '). Did you mean to pass an options ' + 'object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.' + ' (on API request to ' + requestMethod + ' `' + path + '`)');\n  }\n\n  var requestPath = self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {\n      headers: headers\n    });\n  }\n\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    data: data,\n    auth: options.auth,\n    headers: headers,\n    host: host\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n\n    self._request(opts.requestMethod, opts.host, opts.requestPath, opts.data, opts.auth, {\n      headers: opts.headers\n    }, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;","map":null,"metadata":{},"sourceType":"script"}