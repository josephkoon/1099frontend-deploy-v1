{"ast":null,"code":"import _classCallCheck from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js\";\nimport React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport store from '../../store';\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\nimport emailValidator from '../../validate/emailValidator';\n\nvar GetEmail =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GetEmail, _React$Component);\n\n  function GetEmail(_props) {\n    var _this;\n\n    _classCallCheck(this, GetEmail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetEmail).call(this, _props));\n\n    _this.renderToolTip = function (props) {\n      return React.createElement(ReactTooltip, {\n        id: props.input,\n        place: \"right\",\n        type: \"dark\",\n        effect: \"solid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, props.tip);\n    };\n\n    _this.state = {\n      email: '',\n      isValidEmail: true,\n      isTouchedEmail: false\n    };\n    _this.handleEmailBlur = _this.handleEmailBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFieldChange = _this.handleFieldChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GetEmail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = store.subscribe(this.updateErrors.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"handleFieldChange\",\n    value: function handleFieldChange(e) {\n      var _this2 = this;\n\n      //Update Email Value\n      this.setState({\n        email: e.target.value,\n        isTouchedEmail: true\n      }, function () {\n        _this2.props.updateEmail(_this2.state);\n      });\n    }\n  }, {\n    key: \"handleEmailBlur\",\n    value: function handleEmailBlur(e) {\n      var _this3 = this;\n\n      var value = e.target.value;\n      this.setState({\n        email: value\n      }, function () {\n        _this3.props.updateEmail(_this3.state);\n      }); //Check if valid email  \n\n      this.setState({\n        isValidEmail: isEmail(value)\n      });\n      emailValidator();\n    }\n  }, {\n    key: \"updateErrors\",\n    value: function updateErrors() {\n      var emailErrors = store.getState().emailErrors;\n      this.setState({\n        emailErrors: emailErrors\n      });\n      this.setState({\n        isValidEmail: !emailErrors.email\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var emailColor = !this.state.isValidEmail || this.emailErrors && this.emailErrors.email ? {\n        border: '1px solid red'\n      } : null;\n      return React.createElement(\"div\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Email address *\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        id: \"inputEmail\",\n        style: emailColor,\n        onChange: function onChange(e) {\n          return _this4.handleFieldChange(e);\n        },\n        onBlur: function onBlur(event) {\n          return _this4.handleEmailBlur(event);\n        },\n        required: true,\n        \"data-for\": \"inputEmail\",\n        \"data-tip\": true,\n        \"data-event\": \"focus\",\n        \"data-event-off\": \"blur\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), this.renderToolTip({\n        tip: \"This is the email address to which your receipt will be sent.\",\n        input: \"inputEmail\"\n      })), React.createElement(FieldCheck3, {\n        isValid: this.state.isValidEmail,\n        message: this.emailErrors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GetEmail;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    email: state.email,\n    emailErrors: state.emailErrors\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateEmail: updateEmail\n  }, dispatch);\n};\n\nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\nexport default GetEmail;","map":{"version":3,"sources":["/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js"],"names":["React","ReactTooltip","store","isEmail","connect","bindActionCreators","updateEmail","FieldCheck3","emailValidator","GetEmail","props","renderToolTip","input","tip","state","email","isValidEmail","isTouchedEmail","handleEmailBlur","bind","handleFieldChange","unsubscribe","subscribe","updateErrors","e","setState","target","value","emailErrors","getState","emailColor","border","event","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactTooltip from 'react-tooltip'\n\nimport store from '../../store';\n\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\n\nimport emailValidator from '../../validate/emailValidator';\n\n\n\nclass GetEmail extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: '',\n            isValidEmail: true,\n            isTouchedEmail: false,\n        }\n        this.handleEmailBlur = this.handleEmailBlur.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n\n    componentDidMount () {\n        this.unsubscribe = store.subscribe(this.updateErrors.bind(this))\n    }\n\n    componentWillUnmount() {\n        this.unsubscribe();\n    }\n\n    handleFieldChange(e) {\n        //Update Email Value\n        this.setState({ email:e.target.value, isTouchedEmail:true }, () => {\n            this.props.updateEmail(this.state)\n        });\n    }\n\n\n    renderToolTip = (props) => {\n        return(\n            <ReactTooltip id={props.input} place=\"right\" type=\"dark\" effect=\"solid\">\n                 {props.tip}\n            </ReactTooltip>\n        )\n    };\n\n\n    handleEmailBlur(e) {\n        var value = e.target.value; \n        this.setState({ email: value }, () => {\n            this.props.updateEmail(this.state)\n        });\n\n        //Check if valid email  \n        this.setState({ isValidEmail: isEmail(value) });\n        emailValidator();\n    };\n\n\n    updateErrors() {\n        const emailErrors = store.getState().emailErrors;\n        this.setState({ emailErrors:emailErrors });\n        this.setState({ isValidEmail:!emailErrors.email});\n    }\n\n\n      \n    render() {\n        const emailColor = (!this.state.isValidEmail || (this.emailErrors && this.emailErrors.email)) ? {border: '1px solid red'} : null;\n\n\n        return(\n            <div align=\"left\">\n                <label>Email address *</label>\n                <div className=\"form-group\" align=\"left\" >\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail\" \n                        style={emailColor}\n                        onChange={(e) => this.handleFieldChange(e)} \n                        onBlur={(event) => this.handleEmailBlur(event)} \n                        required\n                        data-for='inputEmail' data-tip data-event='focus' data-event-off='blur'\n                    />\n                    {this.renderToolTip( {tip:\"This is the email address to which your receipt will be sent.\", input: \"inputEmail\"} )}\n                </div>\n                <FieldCheck3 isValid={this.state.isValidEmail} message={this.emailErrors.email} />\n            </div>\n        )\n    }\n}\n\n  \nfunction mapStateToProps(state) {\n    return{\n      email: state.email,\n      emailErrors: state.emailErrors,\n    }\n  }\n  \nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateEmail: updateEmail\n    }, dispatch )\n  }\n  \nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\n  \nexport default GetEmail;\n\n\n\n"]},"metadata":{},"sourceType":"module"}