{"ast":null,"code":"import _classCallCheck from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/josephkoon/Desktop/1099-complete/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js\";\nimport React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport store from '../../store';\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\nimport emailValidator from '../../validate/emailValidator';\n\nvar GetEmail =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GetEmail, _React$Component);\n\n  function GetEmail(_props) {\n    var _this;\n\n    _classCallCheck(this, GetEmail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetEmail).call(this, _props));\n\n    _this.renderToolTip = function (props) {\n      return React.createElement(ReactTooltip, {\n        className: \"tooltip-container\",\n        id: props.input,\n        place: \"right\",\n        type: \"dark\",\n        effect: \"solid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, props.tip);\n    };\n\n    _this.state = {\n      email: '',\n      emailError: '',\n      isValidEmail: true,\n      isTouchedEmail: false,\n      emailErrors: {}\n    };\n    _this.handleEmailBlur = _this.handleEmailBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFieldChange = _this.handleFieldChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GetEmail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = store.subscribe(this.updateErrors.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"handleFieldChange\",\n    value: function handleFieldChange(e) {\n      var _this2 = this;\n\n      //Update Email Value\n      this.setState({\n        email: e.target.value,\n        isTouchedEmail: true\n      }, function () {\n        _this2.props.updateEmail(_this2.state);\n      });\n    }\n  }, {\n    key: \"updateErrors\",\n    value: function updateErrors() {\n      var emailErrors = store.getState().emailErrors;\n      this.setState({\n        emailErrors: emailErrors\n      });\n      this.setState({\n        isValidEmail: !emailErrors.email\n      });\n    }\n  }, {\n    key: \"handleEmailBlur\",\n    value: function handleEmailBlur(e) {\n      var value = e.target.value;\n      var errorMessage;\n\n      if (!value) {\n        errorMessage = 'Email is required.';\n      } else if (!isEmail(value)) {\n        errorMessage = 'Email is not a valid email address.';\n      }\n\n      this.setState({\n        emailError: errorMessage\n      }); // this.setState({ email: value }, () => {\n      //     this.props.updateEmail(this.state)\n      // });\n      //Check if valid email  \n      // this.setState({ isValidEmail: isEmail(value) });\n      // emailValidator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var emailColor = !this.state.isValidEmail || this.emailErrors && this.emailErrors.email ? {\n        border: '1px solid red'\n      } : null;\n      return React.createElement(\"div\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Email address *\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        id: \"inputEmail\",\n        style: emailColor,\n        onChange: function onChange(e) {\n          return _this3.handleFieldChange(e);\n        },\n        onBlur: function onBlur(event) {\n          return _this3.handleEmailBlur(event);\n        },\n        required: true,\n        \"data-for\": \"inputEmail\",\n        \"data-tip\": true,\n        \"data-event\": \"focus\",\n        \"data-event-off\": \"blur\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), this.renderToolTip({\n        tip: \"This is the email address to which your receipt will be sent.\",\n        input: \"inputEmail\"\n      })), React.createElement(\"span\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.emailError), React.createElement(FieldCheck3, {\n        isValid: this.state.isValidEmail,\n        message: this.state.emailErrors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GetEmail;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    email: state.email,\n    emailErrors: state.emailErrors\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateEmail: updateEmail\n  }, dispatch);\n};\n\nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\nexport default GetEmail;","map":{"version":3,"sources":["/Users/josephkoon/Desktop/1099-complete/src/components/Form1099/GetEmail.js"],"names":["React","ReactTooltip","store","isEmail","connect","bindActionCreators","updateEmail","FieldCheck3","emailValidator","GetEmail","props","renderToolTip","input","tip","state","email","emailError","isValidEmail","isTouchedEmail","emailErrors","handleEmailBlur","bind","handleFieldChange","unsubscribe","subscribe","updateErrors","e","setState","target","value","getState","errorMessage","emailColor","border","event","color","Component","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactTooltip from 'react-tooltip'\n\nimport store from '../../store';\n\nimport isEmail from 'validator/lib/isEmail';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { updateEmail } from '../../actions';\nimport { FieldCheck3 } from './FieldCheck';\n\nimport emailValidator from '../../validate/emailValidator';\n\n\n\nclass GetEmail extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: '',\n            emailError:'',\n\n            isValidEmail: true,\n            isTouchedEmail: false,\n            emailErrors:{}\n        }\n        this.handleEmailBlur = this.handleEmailBlur.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n\n    componentDidMount () {\n        this.unsubscribe = store.subscribe(this.updateErrors.bind(this))\n    }\n\n    componentWillUnmount() {\n        this.unsubscribe();\n    }\n\n    handleFieldChange(e) {\n        //Update Email Value\n        this.setState({ email:e.target.value, isTouchedEmail:true }, () => {\n            this.props.updateEmail(this.state)\n        });\n    }\n\n\n    renderToolTip = (props) => {\n        return(\n            <ReactTooltip className='tooltip-container' id={props.input} place=\"right\" type=\"dark\" effect=\"solid\">\n                 {props.tip}\n            </ReactTooltip>\n        )\n    };\n\n\n\n\n\n\n    updateErrors() {\n        const emailErrors = store.getState().emailErrors;\n        this.setState({ emailErrors:emailErrors });\n        this.setState({ isValidEmail:!emailErrors.email});\n    }\n\n\n\n    handleEmailBlur(e) {\n        let value = e.target.value; \n\n        let errorMessage\n        if (!value) {\n            errorMessage = 'Email is required.'\n        } \n        else if (!isEmail(value)) {\n            errorMessage = 'Email is not a valid email address.'\n        }\n\n        this.setState({emailError:errorMessage})\n\n\n        // this.setState({ email: value }, () => {\n        //     this.props.updateEmail(this.state)\n        // });\n\n        //Check if valid email  \n        // this.setState({ isValidEmail: isEmail(value) });\n        // emailValidator();\n    };\n\n\n      \n    render() {\n        const emailColor = (!this.state.isValidEmail || (this.emailErrors && this.emailErrors.email)) ? {border: '1px solid red'} : null;\n\n        return(\n            <div align=\"left\">\n                <label>Email address *</label>\n                <div className=\"form-group\" align=\"left\" >\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail\" \n                        style={emailColor}\n                        onChange={(e) => this.handleFieldChange(e)} \n                        onBlur={(event) => this.handleEmailBlur(event)} \n                        required\n                        data-for='inputEmail' data-tip data-event='focus' data-event-off='blur'\n                    />\n                    {this.renderToolTip( {tip:\"This is the email address to which your receipt will be sent.\", input: \"inputEmail\"} )}\n                </div>\n                <span style={{color:'red'}}>{this.state.emailError}</span>\n                <FieldCheck3 isValid={this.state.isValidEmail} message={this.state.emailErrors.email} />\n            </div>\n        )\n    }\n}\n\n  \nfunction mapStateToProps(state) {\n    return{\n      email: state.email,\n      emailErrors: state.emailErrors,\n    }\n  }\n  \nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateEmail: updateEmail\n    }, dispatch )\n  }\n  \nGetEmail = connect(mapStateToProps, mapDispatchToProps)(GetEmail);\n  \nexport default GetEmail;\n\n\n\n"]},"metadata":{},"sourceType":"module"}