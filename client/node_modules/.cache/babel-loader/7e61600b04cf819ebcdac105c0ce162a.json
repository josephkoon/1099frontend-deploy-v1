{"ast":null,"code":"'use strict';\n\nStripe.DEFAULT_HOST = 'api.stripe.com';\nStripe.DEFAULT_PORT = '443';\nStripe.DEFAULT_BASE_PATH = '/v1/';\nStripe.DEFAULT_API_VERSION = null; // Use node's default timeout:\n\nStripe.DEFAULT_TIMEOUT = require('http').createServer().timeout;\nStripe.PACKAGE_VERSION = require('../package.json').version;\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  lang_version: process.version,\n  platform: process.platform,\n  publisher: 'stripe',\n  uname: null\n};\nStripe.USER_AGENT_SERIALIZED = null;\nStripe.MAX_NETWORK_RETRY_DELAY_SEC = 2;\nStripe.INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nvar APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\n\nvar resourceNamespace = require('./ResourceNamespace');\n\nvar resources = {\n  // Support Accounts for consistency, Account for backwards compat\n  Account: require('./resources/Accounts'),\n  Accounts: require('./resources/Accounts'),\n  AccountLinks: require('./resources/AccountLinks'),\n  ApplePayDomains: require('./resources/ApplePayDomains'),\n  ApplicationFees: require('./resources/ApplicationFees'),\n  Balance: require('./resources/Balance'),\n  BitcoinReceivers: require('./resources/BitcoinReceivers'),\n  Charges: require('./resources/Charges'),\n  CountrySpecs: require('./resources/CountrySpecs'),\n  Coupons: require('./resources/Coupons'),\n  CreditNotes: require('./resources/CreditNotes'),\n  Customers: require('./resources/Customers'),\n  Disputes: require('./resources/Disputes'),\n  EphemeralKeys: require('./resources/EphemeralKeys'),\n  Events: require('./resources/Events'),\n  ExchangeRates: require('./resources/ExchangeRates'),\n  Files: require('./resources/Files'),\n  FileLinks: require('./resources/FileLinks'),\n  InvoiceItems: require('./resources/InvoiceItems'),\n  Invoices: require('./resources/Invoices'),\n  IssuerFraudRecords: require('./resources/IssuerFraudRecords'),\n  LoginLinks: require('./resources/LoginLinks'),\n  OAuth: require('./resources/OAuth'),\n  OrderReturns: require('./resources/OrderReturns'),\n  Orders: require('./resources/Orders'),\n  PaymentIntents: require('./resources/PaymentIntents'),\n  PaymentMethods: require('./resources/PaymentMethods'),\n  Payouts: require('./resources/Payouts'),\n  Plans: require('./resources/Plans'),\n  Products: require('./resources/Products'),\n  RecipientCards: require('./resources/RecipientCards'),\n  Recipients: require('./resources/Recipients'),\n  Refunds: require('./resources/Refunds'),\n  Reviews: require('./resources/Reviews'),\n  Skus: require('./resources/SKUs'),\n  Sources: require('./resources/Sources'),\n  SubscriptionItems: require('./resources/SubscriptionItems'),\n  SubscriptionSchedules: require('./resources/SubscriptionSchedules'),\n  Subscriptions: require('./resources/Subscriptions'),\n  TaxRates: require('./resources/TaxRates'),\n  ThreeDSecure: require('./resources/ThreeDSecure'),\n  Tokens: require('./resources/Tokens'),\n  Topups: require('./resources/Topups'),\n  Transfers: require('./resources/Transfers'),\n  UsageRecords: require('./resources/UsageRecords'),\n  UsageRecordSummaries: require('./resources/UsageRecordSummaries'),\n  WebhookEndpoints: require('./resources/WebhookEndpoints'),\n  // The following rely on pre-filled IDs:\n  ApplicationFeeRefunds: require('./resources/ApplicationFeeRefunds'),\n  ChargeRefunds: require('./resources/ChargeRefunds'),\n  CustomerCards: require('./resources/CustomerCards'),\n  CustomerSubscriptions: require('./resources/CustomerSubscriptions'),\n  Persons: require('./resources/Persons'),\n  SubscriptionScheduleRevisions: require('./resources/SubscriptionScheduleRevisions'),\n  TaxIds: require('./resources/TaxIds'),\n  TransferReversals: require('./resources/TransferReversals'),\n  // Namespaced resources\n  Checkout: resourceNamespace('checkout', {\n    Sessions: require('./resources/Checkout/Sessions')\n  }),\n  Issuing: resourceNamespace('issuing', {\n    Authorizations: require('./resources/Issuing/Authorizations'),\n    Cardholders: require('./resources/Issuing/Cardholders'),\n    Cards: require('./resources/Issuing/Cards'),\n    Disputes: require('./resources/Issuing/Disputes'),\n    Transactions: require('./resources/Issuing/Transactions')\n  }),\n  Radar: resourceNamespace('radar', {\n    ValueLists: require('./resources/Radar/ValueLists'),\n    ValueListItems: require('./resources/Radar/ValueListItems')\n  }),\n  Reporting: resourceNamespace('reporting', {\n    ReportRuns: require('./resources/Reporting/ReportRuns'),\n    ReportTypes: require('./resources/Reporting/ReportTypes')\n  }),\n  Sigma: resourceNamespace('sigma', {\n    ScheduledQueryRuns: require('./resources/Sigma/ScheduledQueryRuns')\n  }),\n  Terminal: resourceNamespace('terminal', {\n    ConnectionTokens: require('./resources/Terminal/ConnectionTokens'),\n    Locations: require('./resources/Terminal/Locations'),\n    Readers: require('./resources/Terminal/Readers')\n  })\n}; // For backwards compatibility, `Files` is aliased to `FileUploads`\n\nresources.FileUploads = resources.Files;\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nfunction Stripe(key, version) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, version);\n  }\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writeable: false\n  });\n  this.on = this._emitter.on.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n  this._api = {\n    auth: null,\n    host: Stripe.DEFAULT_HOST,\n    port: Stripe.DEFAULT_PORT,\n    basePath: Stripe.DEFAULT_BASE_PATH,\n    version: Stripe.DEFAULT_API_VERSION,\n    timeout: Stripe.DEFAULT_TIMEOUT,\n    agent: null,\n    dev: false,\n    maxNetworkRetries: 0\n  };\n\n  this._prepResources();\n\n  this.setApiKey(key);\n  this.setApiVersion(version);\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n  this._prevRequestMetrics = [];\n  this.setTelemetryEnabled(false);\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\nStripe.prototype = {\n  setHost: function setHost(host, port, protocol) {\n    this._setApiField('host', host);\n\n    if (port) {\n      this.setPort(port);\n    }\n\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n  setProtocol: function setProtocol(protocol) {\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n  setPort: function setPort(port) {\n    this._setApiField('port', port);\n  },\n  setApiVersion: function setApiVersion(version) {\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n  setApiKey: function setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', 'Bearer ' + key);\n    }\n  },\n  setTimeout: function setTimeout(timeout) {\n    this._setApiField('timeout', timeout == null ? Stripe.DEFAULT_TIMEOUT : timeout);\n  },\n  setAppInfo: function setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n    var appInfo = APP_INFO_PROPERTIES.reduce(function (accum, prop) {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined); // Kill the cached UA string because it may no longer be valid\n\n    Stripe.USER_AGENT_SERIALIZED = undefined;\n    this._appInfo = appInfo;\n  },\n  setHttpAgent: function setHttpAgent(agent) {\n    this._setApiField('agent', agent);\n  },\n  _setApiField: function _setApiField(key, value) {\n    this._api[key] = value;\n  },\n  getApiField: function getApiField(key) {\n    return this._api[key];\n  },\n  setClientId: function setClientId(clientId) {\n    this._clientId = clientId;\n  },\n  getClientId: function getClientId() {\n    return this._clientId;\n  },\n  getConstant: function getConstant(c) {\n    return Stripe[c];\n  },\n  getMaxNetworkRetries: function getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n  setMaxNetworkRetries: function setMaxNetworkRetries(maxNetworkRetries) {\n    if (maxNetworkRetries && typeof maxNetworkRetries !== 'number' || arguments.length < 1) {\n      throw new Error('maxNetworkRetries must be a number.');\n    }\n\n    this._setApiField('maxNetworkRetries', maxNetworkRetries);\n  },\n  getMaxNetworkRetryDelay: function getMaxNetworkRetryDelay() {\n    return this.getConstant('MAX_NETWORK_RETRY_DELAY_SEC');\n  },\n  getInitialNetworkRetryDelay: function getInitialNetworkRetryDelay() {\n    return this.getConstant('INITIAL_NETWORK_RETRY_DELAY_SEC');\n  },\n  // Gets a JSON version of a User-Agent and uses a cached version for a slight\n  // speed advantage.\n  getClientUserAgent: function getClientUserAgent(cb) {\n    if (Stripe.USER_AGENT_SERIALIZED) {\n      return cb(Stripe.USER_AGENT_SERIALIZED);\n    }\n\n    this.getClientUserAgentSeeded(Stripe.USER_AGENT, function (cua) {\n      Stripe.USER_AGENT_SERIALIZED = cua;\n      cb(Stripe.USER_AGENT_SERIALIZED);\n    });\n  },\n  // Gets a JSON version of a User-Agent by encoding a seeded object and\n  // fetching a uname from the system.\n  getClientUserAgentSeeded: function getClientUserAgentSeeded(seed, cb) {\n    var self = this;\n    utils.safeExec('uname -a', function (err, uname) {\n      var userAgent = {};\n\n      for (var field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      } // URI-encode in case there are unusual characters in the system's uname.\n\n\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      if (self._appInfo) {\n        userAgent.application = self._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n  getAppInfoAsString: function getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    var formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += '/' + this._appInfo.version;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ' (' + this._appInfo.url + ')';\n    }\n\n    return formatted;\n  },\n  setTelemetryEnabled: function setTelemetryEnabled(enableTelemetry) {\n    this._enableTelemetry = enableTelemetry;\n  },\n  getTelemetryEnabled: function getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n  _prepResources: function _prepResources() {\n    for (var name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  }\n};\nmodule.exports = Stripe; // expose constructor as a named property to enable mocking with Sinon.JS\n\nmodule.exports.Stripe = Stripe;","map":null,"metadata":{},"sourceType":"script"}