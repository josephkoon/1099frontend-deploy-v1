{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar crypto = require('crypto');\n\nvar utils = require('./utils');\n\nvar Error = require('./Error');\n\nvar Webhook = {\n  DEFAULT_TOLERANCE: 300,\n  // 5 minutes\n  constructEvent: function constructEvent(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n    var jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  }\n};\nvar signature = {\n  EXPECTED_SCHEME: 'v1',\n  _computeSignature: function _computeSignature(payload, secret) {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  },\n  verifyHeader: function verifyHeader(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    var details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var expectedSignature = this._computeSignature(details.timestamp + '.' + payload, secret);\n\n    var signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    return true;\n  }\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(function (accum, item) {\n    var kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":null,"metadata":{},"sourceType":"script"}