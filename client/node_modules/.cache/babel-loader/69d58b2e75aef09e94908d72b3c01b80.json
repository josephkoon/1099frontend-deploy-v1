{"ast":null,"code":"'use strict';\n\nvar isPlainObject = require('lodash.isplainobject');\n\nvar stripeMethod = require('./StripeMethod');\n\nvar utils = require('./utils');\n\nmodule.exports = {\n  create: stripeMethod({\n    method: 'POST'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    methodType: 'list'\n  }),\n  retrieve: stripeMethod({\n    method: 'GET',\n    path: '/{id}',\n    urlParams: ['id']\n  }),\n  update: stripeMethod({\n    method: 'POST',\n    path: '{id}',\n    urlParams: ['id']\n  }),\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: '{id}',\n    urlParams: ['id']\n  }),\n  setMetadata: function setMetadata(id, key, value, auth, cb) {\n    var self = this;\n    var data = key;\n    var isObject = isPlainObject(key); // We assume null for an empty object\n\n    var isNull = data === null || isObject && !Object.keys(data).length; // Allow optional passing of auth & cb:\n\n    if ((isNull || isObject) && typeof value == 'string') {\n      auth = value;\n    } else if (typeof auth != 'string') {\n      if (!cb && typeof auth == 'function') {\n        cb = auth;\n      }\n\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n    return utils.callbackifyPromiseWithTimeout(new Promise(function (resolve, reject) {\n      if (isNull) {\n        // Reset metadata:\n        sendMetadata(null, auth);\n      } else if (!isObject) {\n        // Set individual metadata property:\n        var metadata = {};\n        metadata[key] = value;\n        sendMetadata(metadata, auth);\n      } else {\n        // Set entire metadata object after resetting it:\n        this._request('POST', null, path, {\n          metadata: null\n        }, auth, {}, function (err, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          sendMetadata(data, auth);\n        });\n      }\n\n      function sendMetadata(metadata, auth) {\n        self._request('POST', null, path, {\n          metadata: metadata\n        }, auth, {}, function (err, response) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(response.metadata);\n          }\n        });\n      }\n    }.bind(this)), cb);\n  },\n  getMetadata: function getMetadata(id, auth, cb) {\n    if (!cb && typeof auth == 'function') {\n      cb = auth;\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n    return utils.callbackifyPromiseWithTimeout(new Promise(function (resolve, reject) {\n      this._request('GET', null, path, {}, auth, {}, function (err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(response.metadata);\n        }\n      });\n    }.bind(this)), cb);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}